#
# GitHub Actions - 编译 OpenWrt
#
# 源码: https://github.com/openwrt/openwrt
#

name: Build OpenWrt

#
# 脚本触发控制
#
on:
  # 允许在 Actions 页面手动触发工作流
  workflow_dispatch:

  # 当有代码推送到 main 分支时触发
  push:
    branches:
      - main

  # 定时触发 (cron 语法，时间为 UTC)
  # 下面的示例表示每周一 0 点 (UTC) 执行，即北京/东京时间早上
  #schedule:
  # - cron: '0 0 * * 1'

#
# 环境变量，方便统一管理和修改
#
env:
  # OpenWrt 源码仓库地址
  REPO_URL: https://github.com/openwrt/openwrt.git
  # OpenWrt 源码分支 (例如: master, openwrt-23.05)
  REPO_BRANCH: main
  # 您的 OpenWrt .config 文件在仓库中的路径
  CONFIG_FILE: ./openwrt.config
  # 编译产物（固件）上传到 Artifacts 时的名称
  ARTIFACT_NAME: OpenWrt_Firmware_${{ github.run_number }}
  # SSH 连接到 Actions，方便调试 (设置为 true 启用)
  SSH_ACTIONS: false

jobs:
  build:
    # 使用 GitHub 提供的最新版 Ubuntu 系统作为编译环境
    runs-on: ubuntu-latest

    steps:
      # 步骤1: 检出仓库代码
      # 目的是获取我们仓库中的 .config 文件和此 workflow 文件本身
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2: 初始化编译环境，安装必要依赖
      - name: Initialize build environment
        run: |
          echo "Installing build dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget

      # 步骤3: 克隆 OpenWrt 源码
      - name: Clone OpenWrt source code
        run: |
          echo "Cloning OpenWrt from ${{ env.REPO_URL }} branch ${{ env.REPO_BRANCH }}"
          git clone --depth 1 --branch ${{ env.REPO_BRANCH }} ${{ env.REPO_URL }} openwrt
          cd openwrt
          # 显示一下 commit log
          git log -1

      # 步骤4: 更新与安装 Feeds
      - name: Update and install feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          #
          # 如果您有自定义的 feeds，请在这里添加
          # 例如:
          # echo "src-git helloworld https://github.com/fw876/helloworld.git" >> feeds.conf.default
          # ./scripts/feeds update -a
          # ./scripts/feeds install -a
          #

      # 步骤5: 载入自定义 .config 文件
      - name: Load custom configuration
        run: |
          if [ -f "${{ env.CONFIG_FILE }}" ]; then
            echo "Found custom config file, copying to .config"
            cp "${{ env.CONFIG_FILE }}" openwrt/.config
            cd openwrt
            make defconfig
          else
            echo "Custom config file not found, using default .config"
            cd openwrt
            make defconfig
          fi

      # 步骤6: 启用 ccache 编译缓存
      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.workflow }}-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ github.workflow }}-

      # 步骤7: 编译固件
      # -j$(nproc) 将使用所有可用的 CPU核心进行并行编译
      # V=s 参数会让编译日志更简洁，只在出错时输出详细信息
      - name: Compile the firmware
        run: |
          cd openwrt
          echo "show cpu"
          lscpu
          lspci
          free -m
          echo "Starting firmware compilation..."
          make -j$(nproc)

      # 步骤8: 如果需要，通过 SSH 连接进行调试
      - name: SSH connection to debug
        if: env.SSH_ACTIONS == 'true' || job.status == 'failure'
        uses: mxschmitt/action-tmate@v3

      # 步骤9: 整理并上传固件
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: openwrt/bin/targets
